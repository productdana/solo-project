import React from 'react';
import ReactDOM from 'react-dom';
import World from './world.jsx';
import rd3 from 'react-d3';
import d3 from 'd3';
import postButton from './postButton.jsx';
import $ from 'jquery';
// import Victory from 'victory';
import Victory from './chart.jsx';

// var chartDataArray = [];

var CommentBox = React.createClass({

  // loadCommentsFromServer: function() {
  //   $.ajax({
  //     url: '/',
  //     dataType: 'json',
  //     cache: false,
  //     success: function(data) {
  //       this.setState({comment: data});
  //     }.bind(this),
  //     // error: function(xhr, status, err) {
  //     //   console.error(this.props.url, status, err.toString());
  //     // }.bind(this)
  //   });
  // },

  handleCommentSubmit: function(comment) {

    // console.log("you've submitted from the comment form")
    // console.log("raw comment:", comment)
    


    var formattedComment = {}
    // formattedComment.open = parseInt(comment.emotionLevel);
    // formattedComment.date = new Date (comment.postDate);

    formattedComment.y = parseInt(comment.emotionLevel);
    formattedComment.x = new Date (comment.postDate);
    formattedComment.label = comment.text;

    // formattedComment.messageContent = comment.text;
    // console.log("formatted comment is:", formattedComment);

    this.setState({data: this.state.data.concat(formattedComment)});
    // console.log("data key in state is: ", this.state.data)
    // console.log("message type is ", typeof comment.text)
    // console.log("emotion number type is ", typeof comment.emotionLevel)
    // console.log("date type is ", typeof comment.postDate)
    // // var comments = this.state.data;
    // // Optimistically set an id on the new comment. It will be replaced by an
    // // id generated by the server. In a production application you would likely
    // // not use Date.now() for this and would have a more robust system in place.
    // comment.id = Date.now();
    // var newComments = comments.concat([comment]);
    // this.setState({data: newComments});

    // $.ajax({
    //   url: '/',
    //   dataType: 'json',
    //   type: 'POST',
    //   data: comment,
    //   success: function(data) {
    //     this.setState({data: data});
    //   }.bind(this),
    //   error: function(xhr, status, err) {
    //     this.setState({data: comments});
    //     console.error(this.props.url, status, err.toString());
    //   }.bind(this)
    // });
  },

  getInitialState: function() {
    return {data: []};
  },

  // componentDidMount: function() {
  //   this.loadCommentsFromServer();
  //   setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  // },

  render: function() {
    return (
      <div className="commentBox">
        <h1> Emotion Log </h1>
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
        <Victory className = "chart" dater = {this.state.data}/>
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {text: '', emotionLevel: null, postDate: null};
  },

  handleTextChange: function(e) {
    // console.log(e)
    this.setState({text: e.target.value});
  },

  handleEmotionTextChange: function(e) {
    // console.log(e)
    this.setState({emotionLevel: e.target.value});
  },

  handleDateChange: function(e) {
    // console.log(e)
    this.setState({postDate: e.target.value});
  },

  handleSubmit: function(e) {
    e.preventDefault();
    console.log(e)
    var text = this.state.text.trim();
    var emotionLevel = this.state.emotionLevel;
    var postDate = this.state.postDate;
    this.props.onCommentSubmit({text: text, emotionLevel: emotionLevel, postDate: postDate});
    this.setState({text: '', emotionLevel: '', postDate: ''});
  },

  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          className = "emotion-input"
          type="number"
          name="emotional level"
          min="0"
          max="100"
          placeholder="How do you feel on a scale of 1 to 100?"
          value={this.state.emotionLevel}
          onChange={this.handleEmotionTextChange}
        /> 
         <input
          className = "text-input"
          type="text"
          placeholder="Why do you feel that way?"
          value={this.state.text}
          onChange={this.handleTextChange}
        />
         <input
          className = "date-input"
          type="date"
          name="date of feeling"
          value={this.state.postDate}
          onChange={this.handleDateChange}
        /> 
        <input type="submit" value="Submit State" />
      </form>
    );
  }
});

ReactDOM.render(<CommentBox />, document.getElementById('commentBox'));

